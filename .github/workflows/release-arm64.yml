on:
  push:
    tags:
      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Containerd Release

jobs:
  check:
    name: Check Signed Tag
    runs-on: [ubuntu-18.04]
    timeout-minutes: 5
    outputs:
      stringver: ${{ steps.contentrel.outputs.stringver }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: src/github.com/containerd/containerd


      - name: Release content
        id: contentrel
        run: |
          RELEASEVER=${{ github.ref }}
          echo "::set-output name=stringver::${RELEASEVER#refs/tags/v}"
          git tag -l ${RELEASEVER#refs/tags/} -n20000 | tail -n +3 | cut -c 5- >release-notes.md
        working-directory: src/github.com/containerd/containerd

      - name: Save release notes
        uses: actions/upload-artifact@v2
        with:
          name: containerd-release-notes
          path: src/github.com/containerd/containerd/release-notes.md
  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [check]
    timeout-minutes: 15

    strategy:
      matrix:
        os: [ubuntu-18.04]

    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.6'

      - name: Set env
        shell: bash
        env:
          MOS: ${{ matrix.os }}
        run: |
          releasever=${{ github.ref }}
          releasever="${releasever#refs/tags/}"
          os=linux
          [[ "${MOS}" =~ "windows" ]] && {
            os=windows
          }
          echo "RELEASE_VER=${releasever}" >> $GITHUB_ENV
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "OS=${os}" >> $GITHUB_ENV
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          echo "GOARCH=arm64" >> $GITHUB_ENV
      - name: Checkout containerd
        uses: actions/checkout@v2
        with:
          repository: containerd/containerd
          ref: ${{ github.ref }}
          path: src/github.com/containerd/containerd
      - name: Install dependencies
        run: |
          sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc) main" || true
          sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc)-updates main" || true
          sudo dpkg --add-architecture arm64
          sudo apt-get update || true
          sudo apt-get install -y \
            crossbuild-essential-arm64 \
            libseccomp-dev:arm64
          sudo apt-get install -y gperf
#          sudo -E PATH=$PATH script/setup/install-seccomp
#          sudo -E PATH=$PATH script/setup/install-runc
#          sudo -E PATH=$PATH script/setup/install-cni $(grep containernetworking/plugins go.mod | awk '{print $2}')
#          sudo -E PATH=$PATH script/setup/install-critools
#          sudo add-apt-repository ppa:criu/ppa
#          sudo apt-get update
#          sudo apt-get install -y criu
        working-directory: src/github.com/containerd/containerd

      - name: Make
        env:
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
          CGO_ENABLED: 1
        shell: bash
        run: |
          rm -rf Makefile
          wget  https://raw.githubusercontent.com/sealyun-market/containerd/main/Makefile
          make build
          make binaries
          rm bin/containerd-stress*
          TARFILE="containerd-${RELEASE_VER#v}-${OS}-arm64.tar.gz"
          tar czf ${TARFILE} bin/
          sha256sum ${TARFILE} >${TARFILE}.sha256sum
        working-directory: src/github.com/containerd/containerd

      - name: Save build binaries
        uses: actions/upload-artifact@v2
        with:
          name: release-tars-${{ matrix.os }}
          path: src/github.com/containerd/containerd/*.tar.gz*

      - name: Make cri-containerd tar
        shell: bash
        env:
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
          CGO_ENABLED: 1
          RUNC_FLAVOR: runc

        run: |
          if [[ "${OS}" == "linux" ]]; then
            sudo PATH=$PATH script/setup/install-seccomp
          fi
          sed -i s/FASTBUILD=true/FASTBUILD=/ script/setup/install-cni || true
          make   cri-cni-release
        working-directory: src/github.com/containerd/containerd

      - name: Save cri-containerd binaries
        uses: actions/upload-artifact@v2
        with:
          name: release-tars-${{ matrix.os }}
          path: src/github.com/containerd/containerd/releases/cri-containerd-cni-*.tar.gz*

  release:
    name: Create containerd Release
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    needs: [build, check]

    steps:
      - name: Download builds and release notes
        uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Download cri-containerd tar github
        shell: bash
        run: |
          releasever=${{ github.ref }}
          version="${releasever#refs/tags/v}"
          mkdir -p release-tars-github && cd release-tars-github
          wget https://github.com/containerd/containerd/releases/download/v${version}/containerd-${version}-linux-amd64.tar.gz
          wget https://github.com/containerd/containerd/releases/download/v${version}/containerd-${version}-linux-amd64.tar.gz.sha256sum
          wget https://github.com/containerd/containerd/releases/download/v${version}/cri-containerd-cni-${version}-linux-amd64.tar.gz
          wget https://github.com/containerd/containerd/releases/download/v${version}/cri-containerd-cni-${version}-linux-amd64.tar.gz.sha256sum
        working-directory: builds
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          name: containerd ${{ needs.check.outputs.stringver }}
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          body_path: ./builds/containerd-release-notes/release-notes.md
          files: |
            builds/release-tars-**/*
